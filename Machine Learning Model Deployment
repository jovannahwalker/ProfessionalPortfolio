Code Implementation

1. Model Training and Evaluation (in model.py):

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score
import joblib

# Load dataset
def load_data():
    # Example dataset: replace with actual dataset
    data = pd.read_csv('data.csv')
    return data

# Train model
def train_model():
    data = load_data()
    X = data.drop('target', axis=1)  # Replace 'target' with the name of your target column
    y = data['target']  # Replace 'target' with the name of your target column

    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)
    model = RandomForestClassifier(n_estimators=100, random_state=42)
    model.fit(X_train, y_train)
    
    y_pred = model.predict(X_test)
    accuracy = accuracy_score(y_test, y_pred)
    print(f'Model Accuracy: {accuracy:.2f}')
    
    # Save the trained model
    joblib.dump(model, 'model.pkl')

if __name__ == "__main__":
    train_model()

2. Flask Web Application (in app.py):

from flask import Flask, request, jsonify
import joblib
import numpy as np

app = Flask(__name__)

# Load the trained model
model = joblib.load('model.pkl')

@app.route('/')
def home():
    return "Welcome to the Machine Learning Model Deployment API!"

@app.route('/predict', methods=['POST'])
def predict():
    data = request.get_json()
    features = np.array(data['features']).reshape(1, -1)
    prediction = model.predict(features)
    return jsonify({'prediction': int(prediction[0])})

if __name__ == "__main__":
    app.run(debug=True)
